name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DB_NAME: testdb
      DB_USER: testuser
      DB_PASSWORD: testpass

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate dynamic image tag
        id: prep
        run: echo "tag=my-image-name:ci-${GITHUB_RUN_ID}" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag ${{ steps.prep.outputs.tag }}

      - name: Start PostgreSQL container
        run: |
          docker run -d --name postgres \
            -e POSTGRES_DB=$DB_NAME \
            -e POSTGRES_USER=$DB_USER \
            -e POSTGRES_PASSWORD=$DB_PASSWORD \
            -p 5432:5432 postgres:16

      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec postgres pg_isready -U $DB_USER; do
            echo "Esperando a PostgreSQL..."
            sleep 2
          done

      - name: Inspect files inside image
        run: |
          docker run --rm ${{ steps.prep.outputs.tag }} ls -R /app

      - name: Run backend tests
        run: |
          docker run --rm \
            --link postgres \
            -e DB_NAME=$DB_NAME \
            -e DB_USER=$DB_USER \
            -e DB_PASSWORD=$DB_PASSWORD \
            ${{ steps.prep.outputs.tag }} \
            pytest /app/tests/test_app.py --maxfail=5 --disable-warnings

      - name: Security audit with pip-audit
        run: |
          docker run --rm ${{ steps.prep.outputs.tag }} pip-audit

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.prep.outputs.tag }}


