name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: waterpolo
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: mypass
      DB_HOST: db
      SECRET_KEY: supersecret
      LOG_LEVEL: DEBUG

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env file for CI
        run: |
          echo "POSTGRES_DB=${POSTGRES_DB}" > .env
          echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
          echo "DB_HOST=${DB_HOST}" >> .env
          echo "SECRET_KEY=${SECRET_KEY}" >> .env
          echo "LOG_LEVEL=${LOG_LEVEL}" >> .env
          echo "DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:5432/${POSTGRES_DB}" >> .env

      - name: Build and start backend and DB
        run: docker compose -f docker-compose.ci.yml up -d --build

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            docker compose exec -T db pg_isready -U ${POSTGRES_USER} && break
            echo "Waiting for postgres..."
            sleep 3
          done

      - name: Show backend logs
        run: docker compose logs backend

      # ✅ Bandit (seguridad en código)
      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r backend -ll -o bandit_report.txt

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit_report.txt

      #pip-audit (vulnerabilidades en dependencias)
      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit -r backend/requirements.txt > pip_audit_report.txt

      - name: Upload pip-audit Report
        uses: actions/upload-artifact@v3
        with:
          name: pip-audit-report
          path: pip_audit_report.txt

      #Pruebas unitarias
      - name: Run unit tests
        run: docker compose -f docker-compose.ci.yml run --rm backend pytest

      #Trivy (vulnerabilidades en la imagen Docker)
      - name: Run Trivy
        run: |
          docker run --rm -v $(pwd):/root/.cache/ aquasec/trivy image backend:ci --format table --output trivy_report.txt

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy_report.txt
