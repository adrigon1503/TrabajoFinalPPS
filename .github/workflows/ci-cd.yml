name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.DB_USER }}" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

      backend:
        image: python:3.11-slim  
        build:
          context: ./backend
        ports:
          - 8000:8000  
        env:
          DB_HOST: db
          DB_PORT: 5432
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      nginx:
        image: nginx:latest
        ports:
          - 80:80
        volumes:
          - ./backend/nginx.conf:/etc/nginx/nginx.conf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Esperando a PostgreSQL..."
            sleep 2
          done

      - name: Run tests
        env:
          DB_HOST: db
          DB_PORT: 5432
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest --maxfail=5 --disable-warnings --base-url http://localhost/

      - name: Security audit with pip-audit
        run: pip-audit

      - name: Build Docker image
        run: docker build -t waterpolo-api:latest ./backend

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: waterpolo-api:latest
