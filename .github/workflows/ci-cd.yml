name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: waterpolo
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: mypass
      DB_HOST: db
      SECRET_KEY: supersecret
      LOG_LEVEL: DEBUG

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file for CI
        run: |
          echo "POSTGRES_DB=${POSTGRES_DB}" > .env
          echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
          echo "DB_HOST=${DB_HOST}" >> .env
          echo "SECRET_KEY=${SECRET_KEY}" >> .env
          echo "LOG_LEVEL=${LOG_LEVEL}" >> .env

      - name: Build and start services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d --build

      - name: Show backend logs (diagn√≥stico inicial)
        run: docker compose logs backend

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            docker compose exec -T db pg_isready -U ${POSTGRES_USER} && break
            echo "Waiting for postgres..."
            sleep 3
          done

      - name: Run Bandit (security linter)
        run: |
          pip install bandit
          bandit -r backend -ll

      - name: Run pip-audit for dependency vulnerabilities
        run: |
          pip install pip-audit
          pip-audit -r backend/requirements.txt

      - name: Run unit tests (pytest via `run`)
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm backend pytest

      - name: Check if Prometheus is reachable
        run: curl --fail http://localhost:9090/-/ready

      - name: Check if Grafana is reachable
        run: curl --fail http://localhost:3000/api/health

      - name: Check if Kibana is reachable via Nginx
        run: curl --insecure --fail https://localhost/kibana/api/status


      - name: Show backend logs (final)
        run: docker compose logs backend

      - name: Scan Docker image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: backend:ci
